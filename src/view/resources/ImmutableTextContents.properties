avrgnu.executable.name.compiler.c = avr-gcc
avrgnu.executable.name.compiler.cpp = avr-g++
avrgnu.executable.name.linker = avr-g++
avrgnu.executable.name.assembler = avr-gcc
avrgnu.executable.name.archiver = avr-ar

avrgnu.linker.memsettings.segment.value.syntax = <segmentname>=<address>, for example .boot=0xff
avrgnu.linker.memsettings.avr.port.of.gcc = \
The AVR is a Harvard architecture CPU. This means that it separates instruction memory and\n\
data memory. The gcc was originally designed to support Von Neumann architectures which\n\
define a single storage structure to hold both instructions and data.This dichotomy is solved\n\
by a series of nifty tricks in the AVR port of gcc, of  which three should be noted:\n\
\n\
The .text segment starts at 0x0.\n\
The .data segment starts at 0x800000.\n\
The .eeprom segment starts at 0x810000.\n\
\n\
These peculiarities have been abstracted away by the GUI, but users will see the truth when\n\
building projects with relocated segments.\n\
\n\
A relocation definition for flash will be passed to the GNU linker via avr-gcc as the option:\n\
\n\
-Wl,-section-start=bootloader=0x1fc00\n\
Note that the address has been multiplied by 2 to get the byte address.\n\
\n\
A relocation definition for the .data section will be passed as:\n\
\n\
-Wl,-section-start=anewdatasegment=0x800

